// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pelikula.DAO;

namespace Pelikula.DAO.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pelikula.DAO.Model.Anketa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnName("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("ZakljucenoDatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId")
                        .HasName("IX_Anketa_KorisnikId");

                    b.ToTable("Anketa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 1,
                            Naslov = "Omiljeni fimski žanr?"
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 2,
                            Naslov = "Omiljeni klasik?"
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.AnketaOdgovor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnketaId")
                        .HasColumnName("AnketaID")
                        .HasColumnType("int");

                    b.Property<string>("Odgovor")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("RedniBroj")
                        .HasColumnType("int");

                    b.Property<int>("UkupnoIzabrano")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnketaId")
                        .HasName("IX_AnketaOdgovor_AnketaId");

                    b.ToTable("AnketaOdgovor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnketaId = 1,
                            Odgovor = "Akcija",
                            RedniBroj = 1,
                            UkupnoIzabrano = 1
                        },
                        new
                        {
                            Id = 2,
                            AnketaId = 1,
                            Odgovor = "Fantazija",
                            RedniBroj = 2,
                            UkupnoIzabrano = 0
                        },
                        new
                        {
                            Id = 3,
                            AnketaId = 1,
                            Odgovor = "Komedija",
                            RedniBroj = 3,
                            UkupnoIzabrano = 0
                        },
                        new
                        {
                            Id = 4,
                            AnketaId = 1,
                            Odgovor = "Romantika",
                            RedniBroj = 4,
                            UkupnoIzabrano = 0
                        },
                        new
                        {
                            Id = 5,
                            AnketaId = 1,
                            Odgovor = "Horor",
                            RedniBroj = 5,
                            UkupnoIzabrano = 1
                        },
                        new
                        {
                            Id = 6,
                            AnketaId = 2,
                            Odgovor = "Bonnie i Clyde",
                            RedniBroj = 1,
                            UkupnoIzabrano = 0
                        },
                        new
                        {
                            Id = 7,
                            AnketaId = 2,
                            Odgovor = "Rosemaryno dijete",
                            RedniBroj = 2,
                            UkupnoIzabrano = 0
                        },
                        new
                        {
                            Id = 8,
                            AnketaId = 2,
                            Odgovor = "Kum",
                            RedniBroj = 3,
                            UkupnoIzabrano = 1
                        },
                        new
                        {
                            Id = 9,
                            AnketaId = 2,
                            Odgovor = "Pakleni šund",
                            RedniBroj = 4,
                            UkupnoIzabrano = 0
                        },
                        new
                        {
                            Id = 10,
                            AnketaId = 2,
                            Odgovor = "Isijavanje",
                            RedniBroj = 5,
                            UkupnoIzabrano = 1
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.AnketaOdgovorKorisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnketaOdgovorId")
                        .HasColumnName("AnketaOdgovorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnName("KorisnikID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnketaOdgovorId")
                        .HasName("IX_AnketaOdgovorKorisnikDodjela_AnketaOdgovorId");

                    b.HasIndex("KorisnikId")
                        .HasName("IX_AnketaOdgovorKorisnikDodjela_KorisnikId");

                    b.ToTable("AnketaOdgovorKorisnik");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnketaOdgovorId = 1,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 4
                        },
                        new
                        {
                            Id = 2,
                            AnketaOdgovorId = 5,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 6
                        },
                        new
                        {
                            Id = 3,
                            AnketaOdgovorId = 7,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 4
                        },
                        new
                        {
                            Id = 4,
                            AnketaOdgovorId = 10,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 6
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Artikal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("JedinicaMjereId")
                        .HasColumnName("JedinicaMjereID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("JedinicaMjereId")
                        .HasName("IX_Artikal_JedinicaMjereId");

                    b.ToTable("Artikal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 3.5m,
                            JedinicaMjereId = 1,
                            Naziv = "Male kokice",
                            Sifra = "000001"
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 5m,
                            JedinicaMjereId = 1,
                            Naziv = "Velike kokice",
                            Sifra = "000002"
                        },
                        new
                        {
                            Id = 3,
                            Cijena = 2.5m,
                            JedinicaMjereId = 1,
                            Naziv = "Mala Coca-Cola",
                            Sifra = "000003"
                        },
                        new
                        {
                            Id = 4,
                            Cijena = 3m,
                            JedinicaMjereId = 1,
                            Naziv = "Velika Coca-Cola",
                            Sifra = "000004"
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Dojam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnName("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int>("ProjekcijaId")
                        .HasColumnName("ProjekcijaID")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId")
                        .HasName("IX_Dojam_KorisnikId");

                    b.HasIndex("ProjekcijaId")
                        .HasName("IX_Dojam_ProjekcijaId");

                    b.ToTable("Dojam");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 4,
                            Ocjena = 5,
                            ProjekcijaId = 1,
                            Tekst = "Odličan film, potpuno sam zadovoljan uslugama kina."
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 6,
                            Ocjena = 4,
                            ProjekcijaId = 1,
                            Tekst = "Kokice su bile preslane."
                        },
                        new
                        {
                            Id = 3,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 6,
                            Ocjena = 5,
                            ProjekcijaId = 2
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GodinaSnimanja")
                        .HasColumnType("int");

                    b.Property<string>("ImdbLink")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<byte[]>("Plakat")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PlakatThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RediteljId")
                        .HasColumnName("RediteljID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ZanrId")
                        .HasColumnName("ZanrID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RediteljId")
                        .HasName("IX_Film_RediteljId");

                    b.HasIndex("ZanrId")
                        .HasName("IX_Film_ZanrId");

                    b.ToTable("Film");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GodinaSnimanja = 2006,
                            ImdbLink = "https://www.imdb.com/title/tt0453467/",
                            Naslov = "Deja Vu",
                            RediteljId = 15,
                            Sadrzaj = "Svi su iskusili neugodno iskustvo deja vua - djelić sjećanja kada upoznate osobu i osjećate kao da ste je poznavali cijeli život. Ili kad prepoznate mjesto premda nikad prije niste bili ondje. Što ako su ovi osjećaji zapravo upozorenja iz prošlosti ili predznaci budućnosti? U zanimljivom novom akcijskom trileru deja-vu neočekivano vodi agenta Douga Carlina kroz istragu do strašnog zločina. Premda je pozvan na mjesto zločina nakon što je bomba pokrenula kataklizmičnu eksploziju na trajektu u New Orleansu, Carlin će otkriti da je ono za što mnogi smatraju da je samo plod njihovog uma zapravo nešto puno snažnije - i to će ga odvesti u nezamislivu trku za spasom stotina nevinih ljudi.",
                            Trajanje = 126,
                            VideoLink = "https://www.youtube.com/watch?v=uxdS8TP37I4",
                            ZanrId = 1
                        },
                        new
                        {
                            Id = 2,
                            GodinaSnimanja = 2019,
                            ImdbLink = "https://www.imdb.com/title/tt5886046/",
                            Naslov = "Escape room",
                            RediteljId = 11,
                            Sadrzaj = "Četvoro prijatelja iz LA uzimaju učešće u poznatoj igri Escape Room, koju je osmislio izvesni Brice. Ali, shvate da se nađu zarobljeni od strabe demonski posednutog ubice. Prijatelji imaju manje od sat vremena da reše zagonetke i pobegnu iz zaključane sobe za smrtonosnu igru.",
                            Trajanje = 109,
                            VideoLink = "https://www.youtube.com/watch?v=6dSKUoV0SNI",
                            ZanrId = 1
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.FilmGlumac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilmId")
                        .HasColumnName("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("FilmskaLicnostId")
                        .HasColumnName("FilmskaLicnostID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId")
                        .HasName("IX_FilmGlumacDodjela_FilmId");

                    b.HasIndex("FilmskaLicnostId")
                        .HasName("IX_FilmGlumacDodjela_FilmskaLicnostId");

                    b.ToTable("FilmGlumac");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilmId = 1,
                            FilmskaLicnostId = 16
                        },
                        new
                        {
                            Id = 2,
                            FilmId = 1,
                            FilmskaLicnostId = 17
                        },
                        new
                        {
                            Id = 3,
                            FilmId = 1,
                            FilmskaLicnostId = 18
                        },
                        new
                        {
                            Id = 4,
                            FilmId = 2,
                            FilmskaLicnostId = 12
                        },
                        new
                        {
                            Id = 5,
                            FilmId = 2,
                            FilmskaLicnostId = 13
                        },
                        new
                        {
                            Id = 6,
                            FilmId = 2,
                            FilmskaLicnostId = 14
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.FilmskaLicnost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsGlumac")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReziser")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("FilmskaLicnost");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ime = "Adam",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Sandler"
                        },
                        new
                        {
                            Id = 2,
                            Ime = "Al",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Pacino"
                        },
                        new
                        {
                            Id = 3,
                            Ime = "Antonio",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Banderas"
                        },
                        new
                        {
                            Id = 4,
                            Ime = "Arnold",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Schwarzenegger"
                        },
                        new
                        {
                            Id = 5,
                            Ime = "Quentin",
                            IsGlumac = false,
                            IsReziser = true,
                            Prezime = "Tarantino"
                        },
                        new
                        {
                            Id = 6,
                            Ime = "Natalie",
                            IsGlumac = true,
                            IsReziser = false,
                            Prezime = "Portman"
                        },
                        new
                        {
                            Id = 7,
                            Ime = "Nicole",
                            IsGlumac = true,
                            IsReziser = false,
                            Prezime = "Kidman"
                        },
                        new
                        {
                            Id = 8,
                            Ime = "Penelope",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Cruise"
                        },
                        new
                        {
                            Id = 9,
                            Ime = "Sndra",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Bulock"
                        },
                        new
                        {
                            Id = 10,
                            Ime = "Greta",
                            IsGlumac = false,
                            IsReziser = true,
                            Prezime = "Gervig"
                        },
                        new
                        {
                            Id = 11,
                            Ime = "Adam",
                            IsGlumac = false,
                            IsReziser = true,
                            Prezime = "Robitel"
                        },
                        new
                        {
                            Id = 12,
                            Ime = "Taylor",
                            IsGlumac = true,
                            IsReziser = false,
                            Prezime = "Russel"
                        },
                        new
                        {
                            Id = 13,
                            Ime = "Logan",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Miller"
                        },
                        new
                        {
                            Id = 14,
                            Ime = "Jay",
                            IsGlumac = true,
                            IsReziser = false,
                            Prezime = "Elis"
                        },
                        new
                        {
                            Id = 15,
                            Ime = "Tony",
                            IsGlumac = false,
                            IsReziser = true,
                            Prezime = "Scott"
                        },
                        new
                        {
                            Id = 16,
                            Ime = "Paula",
                            IsGlumac = true,
                            IsReziser = false,
                            Prezime = "Patton"
                        },
                        new
                        {
                            Id = 17,
                            Ime = "Denzel",
                            IsGlumac = true,
                            IsReziser = true,
                            Prezime = "Washington"
                        },
                        new
                        {
                            Id = 18,
                            Ime = "Jim",
                            IsGlumac = true,
                            IsReziser = false,
                            Prezime = "Caviezel"
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.JedinicaMjere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KratkiNaziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JedinicaMjere");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KratkiNaziv = "kom",
                            Naziv = "Komad"
                        },
                        new
                        {
                            Id = 2,
                            KratkiNaziv = "kg",
                            Naziv = "Kilogram"
                        },
                        new
                        {
                            Id = 3,
                            KratkiNaziv = "l",
                            Naziv = "Litar"
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Spol")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("TipKorisnikaId")
                        .HasColumnName("TipKorisnikaID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipKorisnikaId")
                        .HasName("IX_Korisnik_TipKorisnikaId");

                    b.ToTable("Korisnik");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumRodjenja = new DateTime(1972, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "administrator@pelikula.com",
                            Ime = "Administrator",
                            KorisnickoIme = "Administrator",
                            LozinkaHash = "hklyR0bGPePvT6VM8F8Q53JlybI=",
                            LozinkaSalt = "inH+Nnd7JfIACXRgWSueog==",
                            Prezime = "Administrator",
                            Spol = "M",
                            TipKorisnikaId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumRodjenja = new DateTime(1979, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "moderator@pelikula.com",
                            Ime = "Moderator",
                            KorisnickoIme = "Moderator",
                            LozinkaHash = "kDnLscyDsxPyJqhfu+9pZTXciz0=",
                            LozinkaSalt = "PabFZlYUgntExYLEirgu7Q==",
                            Prezime = "Moderator",
                            Spol = "Ž",
                            TipKorisnikaId = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumRodjenja = new DateTime(1996, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "radnik@pelikula.com",
                            Ime = "Radnik",
                            KorisnickoIme = "Radnik",
                            LozinkaHash = "Ue71zXkrJSD36HiZEBbm3dBpPw8=",
                            LozinkaSalt = "sNic063o8HGbpLpqEicn8g==",
                            Prezime = "Radnik",
                            Spol = "M",
                            TipKorisnikaId = 3
                        },
                        new
                        {
                            Id = 4,
                            DatumRodjenja = new DateTime(1999, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klijent@pelikula.com",
                            Ime = "Klijent",
                            KorisnickoIme = "Klijent",
                            LozinkaHash = "3EPeyB0Lo5ysG5CkxXXByqepSCI=",
                            LozinkaSalt = "zXZGjF4V6Larv0O07omqMw==",
                            Prezime = "Klijent",
                            Spol = "Ž",
                            TipKorisnikaId = 4
                        },
                        new
                        {
                            Id = 5,
                            DatumRodjenja = new DateTime(1974, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "desktop@pelikula.com",
                            Ime = "Desktop",
                            KorisnickoIme = "Desktop",
                            LozinkaHash = "zjJGW9cLeWwoyTZZrgoMwl5CJ6M=",
                            LozinkaSalt = "ykgdfPqDOVNhQymVyHCZRw==",
                            Prezime = "Desktop",
                            Spol = "M",
                            TipKorisnikaId = 1
                        },
                        new
                        {
                            Id = 6,
                            DatumRodjenja = new DateTime(2003, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mobile@pelikula.com",
                            Ime = "Mobile",
                            KorisnickoIme = "Mobile",
                            LozinkaHash = "4wnyI8bCD6D3ClHmU+RAosEYorc=",
                            LozinkaSalt = "wtqmfxhXLUreV5pf0LUstA==",
                            Prezime = "Mobile",
                            Spol = "Ž",
                            TipKorisnikaId = 4
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Obavijest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnName("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId")
                        .HasName("IX_Obavijest_KorisnikId");

                    b.ToTable("Obavijest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 1,
                            Naslov = "Dobro došli!",
                            Tekst = "Dobro došli na informacijski sistem za podršku rada kino centra!"
                        },
                        new
                        {
                            Id = 2,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 2,
                            Naslov = "Stigla je nova Pelikula aplikacija!",
                            Tekst = "Slušali smo vaše prijedloge te vam s ponosom predstavljamo novu Pelikula aplikaciju. Preuzmite novu Pelikula aplikaciju već danas! Nova aplikacija donosi nove značajke: digitalnu bonus karticu, jednostavnu i brzu kupovinu kinoulaznica te još mnogo toga."
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Prodaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojRacuna")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("RezervacijaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("RezervacijaId");

                    b.ToTable("Prodaja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojRacuna = "1234abc-def56",
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            KorisnikId = 3,
                            RezervacijaId = 1
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.ProdajaArtikal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArtikalId")
                        .HasColumnName("ArtikalID")
                        .HasColumnType("int");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("ProdajaId")
                        .HasColumnName("ProdajaID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtikalId")
                        .HasName("IX_ProdajaArtikalDodjela_ArtikalId");

                    b.HasIndex("ProdajaId")
                        .HasName("IX_ProdajaArtikalDodjela_ProdajaId");

                    b.ToTable("ProdajaArtikal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtikalId = 1,
                            Kolicina = 1,
                            ProdajaId = 1
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Projekcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmId")
                        .HasColumnName("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("SalaId")
                        .HasColumnName("SalaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("VrijediDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VrijediOd")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FilmId")
                        .HasName("IX_Projekcija_FilmId");

                    b.HasIndex("SalaId")
                        .HasName("IX_Projekcija_SalaId");

                    b.ToTable("Projekcija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 7.5m,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            FilmId = 1,
                            SalaId = 1,
                            VrijediDo = new DateTime(2021, 12, 15, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            VrijediOd = new DateTime(2021, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 5.5m,
                            Datum = new DateTime(2021, 12, 14, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            FilmId = 2,
                            SalaId = 2,
                            VrijediDo = new DateTime(2021, 12, 15, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            VrijediOd = new DateTime(2021, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.ProjekcijaKorisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumPosjete")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPosljednjePosjete")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnName("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("ProjekcijaId")
                        .HasColumnName("ProjekcijaID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId")
                        .HasName("IX_ProjekcijaKorisnikDodjela_KorisnikId");

                    b.HasIndex("ProjekcijaId")
                        .HasName("IX_ProjekcijaKorisnikDodjela_ProjekcijaId");

                    b.ToTable("ProjekcijaKorisnik");
                });

            modelBuilder.Entity("Pelikula.DAO.Model.ProjekcijaTermin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjekcijaId")
                        .HasColumnName("ProjekcijaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Termin")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjekcijaId")
                        .HasName("IX_ProjekcijaTermin_ProjekcijaId");

                    b.ToTable("ProjekcijaTermin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjekcijaId = 1,
                            Termin = new DateTime(2021, 12, 13, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ProjekcijaId = 1,
                            Termin = new DateTime(2021, 12, 13, 18, 40, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ProjekcijaId = 1,
                            Termin = new DateTime(2021, 12, 15, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ProjekcijaId = 1,
                            Termin = new DateTime(2021, 12, 15, 18, 40, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ProjekcijaId = 2,
                            Termin = new DateTime(2021, 12, 13, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ProjekcijaId = 2,
                            Termin = new DateTime(2021, 12, 13, 18, 40, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            ProjekcijaId = 2,
                            Termin = new DateTime(2021, 12, 15, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ProjekcijaId = 2,
                            Termin = new DateTime(2021, 12, 15, 18, 40, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojSjedista")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumOtkazano")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumProdano")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumProjekcije")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnName("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int>("ProjekcijaTerminId")
                        .HasColumnName("ProjekcijaTerminID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId")
                        .HasName("IX_Rezervacija_KorisnikId");

                    b.HasIndex("ProjekcijaTerminId")
                        .HasName("IX_Rezervacija_ProjekcijaTerminId");

                    b.ToTable("Rezervacija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojSjedista = 2,
                            Cijena = 15m,
                            Datum = new DateTime(2021, 12, 15, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            DatumProdano = new DateTime(2021, 12, 15, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            DatumProjekcije = new DateTime(2021, 12, 13, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            ProjekcijaTerminId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrojSjedista = 1,
                            Cijena = 5.5m,
                            Datum = new DateTime(2021, 12, 15, 10, 38, 23, 955, DateTimeKind.Local).AddTicks(2123),
                            DatumProjekcije = new DateTime(2021, 12, 13, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 6,
                            ProjekcijaTerminId = 5
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojSjedista")
                        .HasColumnType("int");

                    b.Property<int>("BrojSjedistaDuzina")
                        .HasColumnType("int");

                    b.Property<int>("BrojSjedistaSirina")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Sala");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojSjedista = 42,
                            BrojSjedistaDuzina = 7,
                            BrojSjedistaSirina = 6,
                            Naziv = "Sala 1"
                        },
                        new
                        {
                            Id = 2,
                            BrojSjedista = 42,
                            BrojSjedistaDuzina = 7,
                            BrojSjedistaSirina = 6,
                            Naziv = "Sala 2"
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Sjediste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Broj")
                        .HasColumnType("int");

                    b.Property<string>("Red")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int>("SalaId")
                        .HasColumnName("SalaID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaId");

                    b.ToTable("Sjediste");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Broj = 1,
                            Red = "A",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Broj = 2,
                            Red = "A",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 3,
                            Broj = 3,
                            Red = "A",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 4,
                            Broj = 4,
                            Red = "A",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 5,
                            Broj = 5,
                            Red = "A",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 6,
                            Broj = 6,
                            Red = "A",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 7,
                            Broj = 1,
                            Red = "B",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 8,
                            Broj = 2,
                            Red = "B",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 9,
                            Broj = 3,
                            Red = "B",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 10,
                            Broj = 4,
                            Red = "B",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 11,
                            Broj = 5,
                            Red = "B",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 12,
                            Broj = 6,
                            Red = "B",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 13,
                            Broj = 1,
                            Red = "C",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 14,
                            Broj = 2,
                            Red = "C",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 15,
                            Broj = 3,
                            Red = "C",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 16,
                            Broj = 4,
                            Red = "C",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 17,
                            Broj = 5,
                            Red = "C",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 18,
                            Broj = 6,
                            Red = "C",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 19,
                            Broj = 1,
                            Red = "D",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 20,
                            Broj = 2,
                            Red = "D",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 21,
                            Broj = 3,
                            Red = "D",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 22,
                            Broj = 4,
                            Red = "D",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 23,
                            Broj = 5,
                            Red = "D",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 24,
                            Broj = 6,
                            Red = "D",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 25,
                            Broj = 1,
                            Red = "E",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 26,
                            Broj = 2,
                            Red = "E",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 27,
                            Broj = 3,
                            Red = "E",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 28,
                            Broj = 4,
                            Red = "E",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 29,
                            Broj = 5,
                            Red = "E",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 30,
                            Broj = 6,
                            Red = "E",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 31,
                            Broj = 1,
                            Red = "F",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 32,
                            Broj = 2,
                            Red = "F",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 33,
                            Broj = 3,
                            Red = "F",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 34,
                            Broj = 4,
                            Red = "F",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 35,
                            Broj = 5,
                            Red = "F",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 36,
                            Broj = 6,
                            Red = "F",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 37,
                            Broj = 1,
                            Red = "G",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 38,
                            Broj = 2,
                            Red = "G",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 39,
                            Broj = 3,
                            Red = "G",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 40,
                            Broj = 4,
                            Red = "G",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 41,
                            Broj = 5,
                            Red = "G",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 42,
                            Broj = 6,
                            Red = "G",
                            SalaId = 1
                        },
                        new
                        {
                            Id = 43,
                            Broj = 1,
                            Red = "A",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 44,
                            Broj = 2,
                            Red = "A",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 45,
                            Broj = 3,
                            Red = "A",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 46,
                            Broj = 4,
                            Red = "A",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 47,
                            Broj = 5,
                            Red = "A",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 48,
                            Broj = 6,
                            Red = "A",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 49,
                            Broj = 1,
                            Red = "B",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 50,
                            Broj = 2,
                            Red = "B",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 51,
                            Broj = 3,
                            Red = "B",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 52,
                            Broj = 4,
                            Red = "B",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 53,
                            Broj = 5,
                            Red = "B",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 54,
                            Broj = 6,
                            Red = "B",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 55,
                            Broj = 1,
                            Red = "C",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 56,
                            Broj = 2,
                            Red = "C",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 57,
                            Broj = 3,
                            Red = "C",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 58,
                            Broj = 4,
                            Red = "C",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 59,
                            Broj = 5,
                            Red = "C",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 60,
                            Broj = 6,
                            Red = "C",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 61,
                            Broj = 1,
                            Red = "D",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 62,
                            Broj = 2,
                            Red = "D",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 63,
                            Broj = 3,
                            Red = "D",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 64,
                            Broj = 4,
                            Red = "D",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 65,
                            Broj = 5,
                            Red = "D",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 66,
                            Broj = 6,
                            Red = "D",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 67,
                            Broj = 1,
                            Red = "E",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 68,
                            Broj = 2,
                            Red = "E",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 69,
                            Broj = 3,
                            Red = "E",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 70,
                            Broj = 4,
                            Red = "E",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 71,
                            Broj = 5,
                            Red = "E",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 72,
                            Broj = 6,
                            Red = "E",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 73,
                            Broj = 1,
                            Red = "F",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 74,
                            Broj = 2,
                            Red = "F",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 75,
                            Broj = 3,
                            Red = "F",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 76,
                            Broj = 4,
                            Red = "F",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 77,
                            Broj = 5,
                            Red = "F",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 78,
                            Broj = 6,
                            Red = "F",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 79,
                            Broj = 1,
                            Red = "G",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 80,
                            Broj = 2,
                            Red = "G",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 81,
                            Broj = 3,
                            Red = "G",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 82,
                            Broj = 4,
                            Red = "G",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 83,
                            Broj = 5,
                            Red = "G",
                            SalaId = 2
                        },
                        new
                        {
                            Id = 84,
                            Broj = 6,
                            Red = "G",
                            SalaId = 2
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.SjedisteRezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RezervacijaId")
                        .HasColumnName("RezervacijaID")
                        .HasColumnType("int");

                    b.Property<int>("SjedisteId")
                        .HasColumnName("SjedisteID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RezervacijaId");

                    b.HasIndex("SjedisteId");

                    b.ToTable("SjedisteRezervacija");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RezervacijaId = 1,
                            SjedisteId = 20
                        },
                        new
                        {
                            Id = 2,
                            RezervacijaId = 1,
                            SjedisteId = 21
                        },
                        new
                        {
                            Id = 3,
                            RezervacijaId = 2,
                            SjedisteId = 48
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.TipKorisnika", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("TipKorisnika");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Radnik"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Klijent"
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Zanr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("Zanr");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Akcija",
                            Opis = "Žanr u kojem dominiraju spektakularni akcijski prizori i brzo izmjenjujuće scene pune napetih događaja."
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Avantura",
                            Opis = "Žanr koji obiluje akcijom, potragom i egzotičnim lokacijama."
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Komedija",
                            Opis = "Žanr u kojem je naglasak stavljen na humor."
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Drama",
                            Opis = "Žanr koji najviše zavisi od unutrašnjeg razvoja likova koji se suočavaju s emocionalnim temama."
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Fantazija",
                            Opis = "Žanr u kojem dominiraju elementi natprirorodnog i izmišljenog."
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Horor",
                            Opis = "Žanr koji ima za cilj prenijeti osjećaj užasa i straha."
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Misterija",
                            Opis = "Žanr koji uključuje misterioznu smrt koju treba razriješiti."
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "Romantika",
                            Opis = "Žanr koji je fokusiran na strast, emocije i odnos privrženosti između glavnih likova."
                        },
                        new
                        {
                            Id = 9,
                            Naziv = "Triler",
                            Opis = "Žanr koji karakterišu dinamika, neprestana akcija i vješti junaci koji moraju osujetiti planove zlikovaca."
                        });
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Anketa", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Korisnik", "Korisnik")
                        .WithMany("Anketa")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Anketa_Korisnik_KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.AnketaOdgovor", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Anketa", "Anketa")
                        .WithMany("AnketaOdgovor")
                        .HasForeignKey("AnketaId")
                        .HasConstraintName("FK_AnketaOdgovor_Anketa_AnketaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.AnketaOdgovorKorisnik", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.AnketaOdgovor", "AnketaOdgovor")
                        .WithMany("AnketaOdgovorKorisnik")
                        .HasForeignKey("AnketaOdgovorId")
                        .HasConstraintName("FK_AnketaOdgovorKorisnikDodjela_AnketaOdgovor_AnketaOdgovorId")
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Korisnik", "Korisnik")
                        .WithMany("AnketaOdgovorKorisnik")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_AnketaOdgovorKorisnikDodjela_Korisnik_KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Artikal", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.JedinicaMjere", "JedinicaMjere")
                        .WithMany("Artikal")
                        .HasForeignKey("JedinicaMjereId")
                        .HasConstraintName("FK_Artikal_JedinicaMjere_JedinicaMjereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Dojam", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Korisnik", "Korisnik")
                        .WithMany("Dojam")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Dojam_Korisnik_KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Projekcija", "Projekcija")
                        .WithMany("Dojam")
                        .HasForeignKey("ProjekcijaId")
                        .HasConstraintName("FK_Dojam_Projekcija_ProjekcijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Film", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.FilmskaLicnost", "Reditelj")
                        .WithMany("Film")
                        .HasForeignKey("RediteljId")
                        .HasConstraintName("FK_Film_FilmskaLicnost_RediteljId")
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Zanr", "Zanr")
                        .WithMany("Film")
                        .HasForeignKey("ZanrId")
                        .HasConstraintName("FK_Film_Zanr_ZanrId")
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.FilmGlumac", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Film", "Film")
                        .WithMany("FilmGlumac")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK_FilmGlumacDodjela_Film_FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.FilmskaLicnost", "FilmskaLicnost")
                        .WithMany("FilmGlumac")
                        .HasForeignKey("FilmskaLicnostId")
                        .HasConstraintName("FK_FilmGlumacDodjela_FilmskaLicnost_FilmskaLicnostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Korisnik", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.TipKorisnika", "TipKorisnika")
                        .WithMany("Korisnik")
                        .HasForeignKey("TipKorisnikaId")
                        .HasConstraintName("FK_Korisnik_TipKorisnika")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Obavijest", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Korisnik", "Korisnik")
                        .WithMany("Obavijest")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Obavijest_Korisnik_KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Prodaja", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Korisnik", "Korisnik")
                        .WithMany("Prodaja")
                        .HasForeignKey("KorisnikId")
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Rezervacija", "Rezervacija")
                        .WithMany("Prodaja")
                        .HasForeignKey("RezervacijaId")
                        .HasConstraintName("FK_Prodaja_Rezervacija")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pelikula.DAO.Model.ProdajaArtikal", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Artikal", "Artikal")
                        .WithMany("ProdajaArtikal")
                        .HasForeignKey("ArtikalId")
                        .HasConstraintName("FK_ProdajaArtikalDodjela_Artikal_ArtikalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Prodaja", "Prodaja")
                        .WithMany("ProdajaArtikal")
                        .HasForeignKey("ProdajaId")
                        .HasConstraintName("FK_ProdajaArtikalDodjela_Prodaja_ProdajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Projekcija", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Film", "Film")
                        .WithMany("Projekcija")
                        .HasForeignKey("FilmId")
                        .HasConstraintName("FK_Projekcija_Film_FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Sala", "Sala")
                        .WithMany("Projekcija")
                        .HasForeignKey("SalaId")
                        .HasConstraintName("FK_Projekcija_Sala_SalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.ProjekcijaKorisnik", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Korisnik", "Korisnik")
                        .WithMany("ProjekcijaKorisnik")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_ProjekcijaKorisnikDodjela_Korisnik_KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Projekcija", "Projekcija")
                        .WithMany("ProjekcijaKorisnik")
                        .HasForeignKey("ProjekcijaId")
                        .HasConstraintName("FK_ProjekcijaKorisnikDodjela_Projekcija_ProjekcijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.ProjekcijaTermin", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Projekcija", "Projekcija")
                        .WithMany("ProjekcijaTermin")
                        .HasForeignKey("ProjekcijaId")
                        .HasConstraintName("FK_ProjekcijaTermin_Projekcija_ProjekcijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Rezervacija", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Korisnik", "Korisnik")
                        .WithMany("Rezervacija")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Rezervacija_Korisnik_KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.ProjekcijaTermin", "ProjekcijaTermin")
                        .WithMany("Rezervacija")
                        .HasForeignKey("ProjekcijaTerminId")
                        .HasConstraintName("FK_Rezervacija_ProjekcijaTermin_ProjekcijaTerminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.Sjediste", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Sala", "Sala")
                        .WithMany("Sjediste")
                        .HasForeignKey("SalaId")
                        .HasConstraintName("FK_Sjediste_Sala")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pelikula.DAO.Model.SjedisteRezervacija", b =>
                {
                    b.HasOne("Pelikula.DAO.Model.Rezervacija", "Rezervacija")
                        .WithMany("SjedisteRezervacija")
                        .HasForeignKey("RezervacijaId")
                        .HasConstraintName("FK_SjedisteRezervacija_Rezervacija")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelikula.DAO.Model.Sjediste", "Sjediste")
                        .WithMany("SjedisteRezervacija")
                        .HasForeignKey("SjedisteId")
                        .HasConstraintName("FK_SjedisteRezervacija_Sjediste")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
